import{_ as t}from"./overridewindow_model-ClEToojB.js";import{_ as l,r as p,c as i,b as a,a as c,d as s,e as o,w as u,o as d}from"./app-DsPd-_GC.js";const r="/MacacaViewSystemDocs/assets/ViewElementBehaviourInspector-C5oxHXUT.png",k={};function m(v,n){const e=p("RouteLink");return d(),i("div",null,[n[3]||(n[3]=a(`<h1 id="lifecycle-hook-and-injection" tabindex="-1"><a class="header-anchor" href="#lifecycle-hook-and-injection"><span>LifeCycle Hook and Injection</span></a></h1><h3 id="iviewelementsingleton" tabindex="-1"><a class="header-anchor" href="#iviewelementsingleton"><span>IViewElementSingleton</span></a></h3><p>Components that inherit the <code>IViewElementSingleton</code> interface will be created as singleton instances, referred to as <strong>ViewElementSingleton</strong>.</p><p>A <strong>ViewElementSingleton</strong> is managed by the ViewController and will only have one instance during runtime. Use the <code>ViewController.Instance.GetInjectionInstance&lt;T&gt;()</code> API to directly access the runtime instance.</p><p>To create and use a ViewElementSingleton:</p><ol><li>Create a ViewElement prefab.</li><li>Attach a script that inherits from the <code>IViewElementSingleton</code> interface to the ViewElement object.</li><li>Check the &quot;isUnique&quot; box on the ViewElement component.</li><li>Put it into any ViewState or ViewPage</li><li>call <code>ViewController.Instance.GetInjectionInstance&lt;T&gt;()</code> at runtime.</li></ol><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">//inherits IViewElementSingleton</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewElementSingleton</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span><span class="token punctuation">,</span> <span class="token class-name">IViewElementSingleton</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// Use GetInjectionInstance method to get the singleton instance of ViewElement.</span></span>
<span class="line"><span class="token class-name">MyViewElementSingleton</span> someInjectableClass <span class="token operator">=</span> ViewController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInjectionInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyViewElementSingleton<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iviewelementlifecycle" tabindex="-1"><a class="header-anchor" href="#iviewelementlifecycle"><span>IViewElementLifeCycle</span></a></h3><p>We can hooks the lifecycle on ViewElement by <code>IViewElementLifeCycle</code> interface, implemented the interface to get lifecycle callback on ViewElement.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// These are lifecycle functions to implement:</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnBeforeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnBeforeLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStartShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStartLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnChangePage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> show<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnChangedPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RefreshView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For example, if you want to determine whether a button should be displayed when entering a page:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">//Attach this script to a ViewElement, and put this ViewElement in a ViewPage</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewElementLifeCycle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Monobehavior</span><span class="token punctuation">,</span> <span class="token class-name">IViewElementLifeCycle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span> btn<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnBeforeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnBeforeLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//OnStartShow is called when entering a page.</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStartShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">RefreshView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStartLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnChangePage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> show<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnChangedPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RefreshView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//button display logic</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> isButtonShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//set button active</span></span>
<span class="line">        btn<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span>isButtonShow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),c("p",null,[n[1]||(n[1]=s("For more ViewElement lifecycle information, please check ")),o(e,{to:"/Fundamentals.html#fullpage-lifecycle"},{default:u(()=>n[0]||(n[0]=[s("FullPage LifeCycle")])),_:1}),n[2]||(n[2]=s("."))]),n[4]||(n[4]=a('<h3 id="viewelementbehaviour" tabindex="-1"><a class="header-anchor" href="#viewelementbehaviour"><span>ViewElementBehaviour</span></a></h3><p>The <code>ViewElementBehaviour</code> implements <code>IViewElementLifeCycle</code> and provides additional useful features. It’s helpful when you want to set up callbacks via the inspector using UnityEvents.</p><p><img src="'+r+`" alt="ViewElementBehaviourInspector"></p><p>You can also override these functions:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnBeforeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// Do something</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-injection-viewelementinject" tabindex="-1"><a class="header-anchor" href="#model-injection-viewelementinject"><span>Model Injection (ViewElementInject)</span></a></h3><p>In any class that implements <code>IViewElementLifeCycle</code> or inherits from <code>ViewElementBehaviour</code>, we can use a powerful feature called <strong>Model Injection</strong>, which allows us to send data to a runtime <code>ViewElement</code>.</p><p>Here’s an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// MyUILogic.cs is attached to a ViewElement, and this ViewElement is need to be set on a ViewPage</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> testIntInject<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">string</span></span> testStringInject<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// also support using property</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call the change page API and use SetPageModel() to set the Model data instance</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPageModel</span><span class="token punctuation">(</span><span class="token number">23456</span><span class="token punctuation">,</span> <span class="token string">&quot;my string value&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a result, the values <strong>23456</strong> and <strong>&quot;my string value&quot;</strong> will automatically be set into the fields (<code>testIntInject</code> in this case) or properties (<code>testStringInject</code> in this case) of <code>MyUILogic</code> once the ViewElement is shown.</p><p>In theory, it supports all types, including custom types:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> intValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> boolValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// MyUILogic.cs is attached to a ViewElement, and this ViewElement is need to be set on a ViewPage</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name">MyClass</span> testMyClass<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> testStringList<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//Properties are also supported</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call the change page API and use SetPageModel() to set the model data instance</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPageModel</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyClass</span><span class="token punctuation">{</span> intValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> boolValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;item 1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;item 2&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="overrideproperty-attribute" tabindex="-1"><a class="header-anchor" href="#overrideproperty-attribute"><span>OverrideProperty Attribute</span></a></h3><p>Model injection is completed before the ViewSystem runtime override, so you can combine it with the RuntimeOverride feature (See <a href="#override-property-via-script">Override Property Via Script</a>).</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">OverrideProperty</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Text&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TextMeshProUGUI</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>TextMeshProUGUI<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> someString<span class="token punctuation">;</span> <span class="token comment">// The value will be set to the TextMeshProUGUI.text on the GameObject &quot;Text&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="injecting-multiple-model-values-of-the-same-type" tabindex="-1"><a class="header-anchor" href="#injecting-multiple-model-values-of-the-same-type"><span>Injecting Multiple Model Values of the Same Type</span></a></h3><p>By default, the Model Inject only support each a only one value/instance in runtime.</p><p>See this example,</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// inject two string values into the Model</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPageModel</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;item 1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;item 2&quot;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This will throw an exception with the message:</span></span>
<span class="line"><span class="token comment">// &quot;When using ViewSystem model biding, each Type only available for one instance, if you would like to bind multiple instance of a Type use Collections(List, Array) or ViewInjectDictionary&lt;T&gt; instead.&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To solve this problem, consider the following options:</p><ul><li>Use a collection type like <strong><code>List&lt;T&gt;</code></strong></li><li>Create a custom object type as a wrapper</li><li>Use <code>ViewInjectDictionary&lt;T&gt;</code></li></ul><h4 id="viewinjectdictionary-t" tabindex="-1"><a class="header-anchor" href="#viewinjectdictionary-t"><span>ViewInjectDictionary&lt;T&gt;</span></a></h4><p>ViewInjectDictionary&lt;T&gt; is a predefined dictionary designed to solve this issue, where T represents the target property/field type.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewBehaviour</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> testStringInject1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> testStringInject2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> datas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ViewInjectDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">datas<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token string">&quot;testStringInject1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The key is the field/property name, and the value is what will be set</span></span>
<span class="line">datas<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token string">&quot;testStringInject2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The key is the field/property name, and the value is what will be set</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPageModel</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="page-model-and-shared-model" tabindex="-1"><a class="header-anchor" href="#page-model-and-shared-model"><span>Page Model and Shared Model</span></a></h3><p>Up until now, all examples have used the <code>SetPageModel()</code> API to set model data. This approach is referred to as the <strong>Page Model</strong>, meaning the model data is only valid during the ViewPage lifecycle.</p><p>There is another model scope which is call <strong>Shared Model</strong>, the Shared Model is manage by the ViewSystem, by default all <strong>IViewElementSingleton</strong> will become Shared Moedl automatically, which means you can use [ViewElementInject] to inject them in a ViewElementBehaviour.</p><p>Another scope for models is called the <strong>Shared Model</strong>, which is managed by the ViewSystem. By default, all <code>IViewElementSingleton</code> instances automatically become Shared Models, meaning you can use <code>[ViewElementInject]</code> to inject them into a <code>ViewElementBehaviour</code> without needing to use SetPageModel().</p><p>Using this method, you can turn commonly used ViewElements into ViewElementSingletons, allowing these components to be shared between different ViewElements. This can be useful for features like a currency list.</p><p>See the example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// Define an IViewElementSingleton sample</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewElementSingletonSample</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Monobehavior</span><span class="token punctuation">,</span> <span class="token class-name">IViewElementSingleton</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// MyUILogic.cs is attached to a ViewElement, and this ViewElement is set on a ViewPage</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name">MyViewElementSingletonSample</span> myViewElementSingletonSample<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token comment">// Since MyViewElementSingletonSample implements IViewElementSingleton, </span></span>
<span class="line">    <span class="token comment">// we don&#39;t need to use SetPageModel(); the system will still inject the value.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you can manually set the Shared Model using the <code>ViewController.Instance.SetSharedModel()</code> API. Here&#39;s an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> intValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> boolValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  MyUILogic.cs is attached to a ViewElement, and this ViewElement is set on a ViewPage </span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token class-name">MyClass</span> myClass<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Before calling the ChangePage API, use SetSharedModel() to set the model data.</span></span>
<span class="line"><span class="token comment">// This will turn it into a Shared Model. Each type can only have one instance.</span></span>
<span class="line"><span class="token comment">// If a duplicate type is set, the system will automatically override the existing value.</span></span>
<span class="line">ViewController<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">SetSharedMoedl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyClass</span><span class="token punctuation">{</span>intValue <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> boolValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Now call the change page API without using SetPageModel()</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a result, even though we didn&#39;t use SetPageModel(), the value is still injected! This is because the system automatically falls back to search the <strong>Shared Model</strong>.</p><p><strong>Model Search Scope</strong> There are 4 ways to control the model search scope. You can use the <code>InjectScope</code> enum to manage this.</p><p>The default scope is <code>PageFirst</code></p><ul><li><code>InjectScope.PageFirst</code> : Search the value from the PageModel first and then SharedModel</li><li><code>InjectScope.PageOnly</code> : Search the value from the PageModel only.</li><li><code>InjectScope.SharedFirst</code> : Search the value from the SharedModel first, and then PageModel,</li><li><code>InjectScope.SharedOnly</code> : Search the value from the SharedModel only.</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUILogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ViewElementBehaviour</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ViewElementInject</span><span class="token attribute-arguments"><span class="token punctuation">(</span>InjectScope<span class="token punctuation">.</span>PageOnly<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// change the search scope</span></span>
<span class="line">    <span class="token class-name">MyClass</span> myClass<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uusingse-model-inject-with-override-window" tabindex="-1"><a class="header-anchor" href="#uusingse-model-inject-with-override-window"><span>UUsingse Model Inject with Override Window</span></a></h3><p>The ViewSystem Editor offers a convenient way for developers to set override values.</p><p>See <a href="#override-property-on-a-viewelement">Override property on a ViewElement</a> to learn how to use it.</p><p>By default, the Override Window allows you to set the <strong>Edit Time</strong> value, but you can use special syntax to inject <strong>Model Inject</strong> values.</p><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{InjectScope.TypeName[key]}  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><table><thead><tr><th>Syntax</th><th>Describ</th><th>Example</th></tr></thead><tbody><tr><td>InjectScope</td><td>The model inject scope, using the InjectScope enum value in &#39;String&#39;, or just use &#39;Model&#39;.</td><td>Model <br>PageFirst <br> Page Only <br> SharedFirst <br> SharedOnly</td></tr><tr><td>TypeName</td><td>The full type name of the object you want to use. The system does not check for type mismatches.</td><td>int, string, UnityEngine.Color</td></tr><tr><td>key</td><td>If using ViewInjectDictionary, set the key here.</td><td></td></tr></tbody></table><p>Example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> datas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ViewInjectDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">datas<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token string">&quot;testStringInject1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The key is the field/property name, the value is what will be set</span></span>
<span class="line">datas<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token string">&quot;testStringInject2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The key is the field/property name, the value is what will be set</span></span>
<span class="line">ViewController<span class="token punctuation">.</span><span class="token function">FullPageChanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPage</span><span class="token punctuation">(</span><span class="token string">&quot;MyPage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">SetPageModel</span><span class="token punctuation">(</span></span>
<span class="line">        datas<span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">34234</span><span class="token punctuation">,</span></span>
<span class="line">        Color<span class="token punctuation">.</span>red</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the syntax below to apply the Model value at runtime</span></span>
<span class="line"><span class="token comment">// {Model.string[&quot;testStringInject1&quot;]}  --&gt; applies the value &quot;value1&quot; at runtime  </span></span>
<span class="line"><span class="token comment">// {Model.int}  --&gt; applies the value 34234 at runtime  </span></span>
<span class="line"><span class="token comment">// {Model.UnityEngine.Color}  --&gt; applies the value Color.red at runtime</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This also works with more specific scopes:</span></span>
<span class="line"><span class="token comment">// {PageFirst.string[&quot;testStringInject1&quot;]} --&gt; Same as {Model.string[&quot;testStringInject1&quot;]} </span></span>
<span class="line"><span class="token comment">// {PageOnly.string[&quot;testStringInject1&quot;]} --&gt; Only searches for the value in the PageModel</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+t+'"><blockquote><p>To Set the model inject syntax string on a non string field e.g. Color, you can click the <strong>Eye</strong> Icon on the left of the item to switch the editor display method</p></blockquote><blockquote><p>To set the model inject syntax string on a non-string field, such as <code>Color</code>, you can click the <strong>Eye icon</strong> on the left of the item to toggle the editor display mode.</p></blockquote>',50))])}const b=l(k,[["render",m],["__file","LifeCycle Hook and Injection.html.vue"]]),y=JSON.parse('{"path":"/LifeCycle%20Hook%20and%20Injection.html","title":"LifeCycle Hook and Injection","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"IViewElementSingleton","slug":"iviewelementsingleton","link":"#iviewelementsingleton","children":[]},{"level":3,"title":"IViewElementLifeCycle","slug":"iviewelementlifecycle","link":"#iviewelementlifecycle","children":[]},{"level":3,"title":"ViewElementBehaviour","slug":"viewelementbehaviour","link":"#viewelementbehaviour","children":[]},{"level":3,"title":"Model Injection (ViewElementInject)","slug":"model-injection-viewelementinject","link":"#model-injection-viewelementinject","children":[]},{"level":3,"title":"OverrideProperty Attribute","slug":"overrideproperty-attribute","link":"#overrideproperty-attribute","children":[]},{"level":3,"title":"Injecting Multiple Model Values of the Same Type","slug":"injecting-multiple-model-values-of-the-same-type","link":"#injecting-multiple-model-values-of-the-same-type","children":[]},{"level":3,"title":"Page Model and Shared Model","slug":"page-model-and-shared-model","link":"#page-model-and-shared-model","children":[]},{"level":3,"title":"UUsingse Model Inject with Override Window","slug":"uusingse-model-inject-with-override-window","link":"#uusingse-model-inject-with-override-window","children":[]}],"git":{"updatedTime":1727430962000,"contributors":[{"name":"oldman","email":"oldman@macaca.onmicrosoft.com","commits":1}]},"filePathRelative":"LifeCycle Hook and Injection.md"}');export{b as comp,y as data};
